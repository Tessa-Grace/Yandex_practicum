def stack_brackets(brackets):
    """
    https://contest.yandex.ru/contest/52599/problems
    C. Скобочная последовательность

    Ограничение времени	1 секунда
    Ограничение памяти	64Mb
    Ввод	стандартный ввод или input.txt
    Вывод	стандартный вывод или output.txt
    Марсоход отправляет на Землю структурированные данные; в структурах применяются скобки трёх разных видов: [], () и {}. 
    Скобки могут быть вложены друг в друга сколько угодно раз. Всё бы хорошо, но во время жаркого марсианского лета марсоход перегрелся 
    и по неизвестной причине начал путать скобки. Это привело к тому, что открытые скобки остаются незакрытыми и закрывающие скобки не имеют открывающих. 
    Прочесть такую структуру становится невозможно. В Центре управления марсоходами решили создать программу для контроля за расстановкой скобок. 
    Если в сообщении порядок скобок нарушен, марсоход создаст сообщение заново: в этом случае вероятность повторения ошибок минимальна.

    Напишите функцию is_correct_bracket_seq(), которая принимает на вход скобочную последовательность и возвращает True, если последовательность правильная, 
    и False — в остальных случаях.

    Что считать правильной последовательностью?
    Пустая строка — это правильная скобочная последовательность.
    Правильная скобочная последовательность, взятая в скобки одного типа, — тоже правильная: ( { [ ] } ).
    Правильная скобочная последовательность с приписанной слева или справа правильной скобочной последовательностью — правильная: ( { [ ] } ) ( [ ] ).

    Формат ввода
    На вход подаётся одна строка, содержащая скобочную последовательность. Скобки записаны подряд, без пробелов.

    Формат вывода
    True или False.

    Пример 1
    Ввод
    {[()]}
    Вывод
    True

    Пример 2
    Ввод
    ()
    Вывод
    True
    """
    pairs = {'(':')', '{': '}', '[': ']'} # словарь, где ключи это открывающие скобки, а значения - соответствующие закрывающие.
    stack = [] # пустой стек (список), который будет использоваться для отслеживания открытых скобок
    
    # Обработка открывающей скобки:
    # Если текущая скобка открывающая (один из '(', '{', '['), добавляем её в стек.
    for item in brackets:
        if item in ['(', '{', '[']:
            stack.append(item)
        # Обработка закрывающей скобки:
        # Если скобка закрывающая:
        # Проверяем, не пуст ли стек (если пуст - значит нет открывающей скобки для текущей закрывающей) → return False
        # Извлекаем последнюю открывающую скобку из стека (stack.pop())
        # Проверяем, соответствует ли закрывающая скобка (item) последней открывающей (pairs[last_open])
        else:
            if not stack:
                return False
            last_open = stack.pop()
            if pairs[last_open] != item:
                return False
    # После обработки всех скобок проверяем, пуст ли стек:
    # Если пуст - все скобки правильно закрыты → return True
    # Если не пуст - остались незакрытые скобки → return False
    return not stack


def main():
    brackets = str(input())
    print(stack_brackets(brackets))

if __name__ == '__main__':
    main()