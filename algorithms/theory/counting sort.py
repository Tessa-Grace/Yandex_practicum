"""
Сортировка подсчётом.

Сортировка подсчётом — не универсальный способ. Он применим для сортировки массивов, в котором точно известен диапазон значений, 
и этот диапазон не очень велик в сопоставлении с общей длиной массива.
При сортировке подсчётом:
- создаётся вспомогательный массив, количество элементов в котором равно максимально возможному значению в сортируемом массиве + 1: 
  если максимально возможное значение в массиве — 10, во вспомогательном массиве будет 11 ячеек с индексами от 0 до 10.
- в каждый элемент вспомогательного массива записывается значение 0;
- подсчитывается количество уникальных значений в исходном массиве; это количество для каждого значения записывается во вспомогательный массив;
- когда подсчёт выполнен — формируется новый массив.
Количество элементов в массиве обозначаем через n, а количество уникальных элементов — r. Тогда сложность алгоритма будет O(n + r). 
В оценке сложности этого алгоритма важно учитывать оба параметра. 
"""

def counting_sort(array, maximum):
    # Создаём массив для подсчёта вхождений каждого значения.
    count = [0] * (maximum + 1)
    # Перебираем массив по элементам.
    for item in array:
        # Для каждого значения массива array увеличиваем счётчик 
        # в соответствующей ячейке массива count.
        # Например, увидели в array значение 2 - добавляем единицу к значению count[2].
        count[item] += 1

    # Объявляем результирующий список:
    sorted_array = []
    # Перебираем все уникальные элементы в списке count.
    for item in range(maximum + 1):
        # Добавляем в sorted_array уникальный элемент столько раз, 
        # сколько он встретился в исходном массиве.
        sorted_array += [item] * count[item]
    return sorted_array


arr = [8, 1, 4, 10, 4, 1, 4, 7, 6, 8, 6, 4, 5, 10, 1, 0, 5, 4, 9, 7]
result = counting_sort(arr, 10)
print(result)
