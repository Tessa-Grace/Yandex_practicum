"""
Заданы число и отсортированный список из целых чисел. Напишите функцию, которая найдёт в этом списке два элемента, сумма которых равна заданному числу, и вернёт кортеж с индексами этих элементов. 
Нельзя использовать один и тот же элемент дважды. Если при определённых входных данных решения у задачи нет, функция должна вернуть None.
Например:
задано число 10;
задан список [1, 2, 3, 4, 5, 6, 7, 11].
Сумму 10 дают элементы со значениями 3 и 7 (их индексы — 2 и 6) и элементы со значениями 4 и 6 (их индексы — 3 и 5). Функция должна вернуть кортеж с любой из этих пар индексов: (2, 6) или (3, 5). 
Ответ (4, 4) (два одинаковых элемента с индексом 4) принят не будет: две пятёрки (значения элементов с индексом 4)  в сумме действительно дают 10, но дважды использовать один элемент нельзя.
"""

def find_two_indexes(data, expected_sum):
    for i in range(len(data)):
        for j in range(i + 1, len(data)):
            if data[i] + data[j] == expected_sum:
                return (i, j)
    return None  # Если пара не найдена


if __name__ == '__main__':
    data = [1, 2, 3, 4, 5, 6, 7, 11]
    expected_sum = 10
    print(find_two_indexes(data, expected_sum))


# _______________________________________________________________________________________________
# Альтернативное решение:
# _______________________________________________________________________________________________
def find_two_indexes(data, expected_sum):
    # Для первого индекса и первого слагаемого.
    for first_index, first_value in enumerate(data):
        # Для второго индекса и второго слагаемого.
        for second_index, second_value in enumerate(data):
            # Если индексы равны, то есть это один и тот же элемент...
            if first_index == second_index:
                # ...переходим к следующему элементу.
                continue
            # Если сумма значений равна ожидаемому результату...
            if first_value + second_value == expected_sum:
                # ...вернуть индексы элементов.
                return first_index, second_index


if __name__ == '__main__':
    data = [1, 2, 3, 4, 5, 6, 7, 11]
    expected_sum = 10
    print(find_two_indexes(data, expected_sum)) 