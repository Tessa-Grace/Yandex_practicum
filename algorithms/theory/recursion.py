"""
Рекурсия

Под словом «рекурсия» в контексте программирования понимают, как правило, рекурсивное выполнение каких-то действий, 
например функцию, которая может многократно вызывать саму себя. Рекурсивное выполнение функций часто применяется при работе с иерархическими, 
вложенными данными, когда заранее неизвестна глубина вложенности.

Условия, при которых ничто не препятствует углублению рекурсии, называют рекурсивным случаем.

Условие, при котором рекурсивная функция прекращает вызывать сама себя, называют базовым случаем. 
Без базового случая рекурсия просто не сможет остановиться — и в результате программа завершится с ошибкой.

Итак, корректно работающая рекурсия должна содержать:
- рекурсивный случай, при котором начинается прямой ход рекурсии и происходит её углубление;
- базовый случай, при котором рекурсия перестаёт углубляться и запускается обратный ход рекурсии.

На практике рекурсивный и базовый случаи можно представить как условие «или/или»: если определённое условие выполняется 
— это рекурсивный случай, углубляем рекурсию; если условие не выполняется — это базовый случай, выходим из рекурсии.
Условий для выхода из рекурсии может быть несколько, а значит, и базовых случаев может быть больше одного. 
Главное — точно понять, что именно должно происходить в базовом случае.
Базовый случай определяет ситуацию, при которой рекурсию нужно остановить. 
Для базового случая результат выполнения функции следует вычислить явно, не прибегая к рекурсивным вызовам.

Чтобы изменить объём памяти, выделенный под стек вызовов, в Python используется метод setrecursionlimit() модуля sys. 
В него передаётся параметр limit — он задаёт максимально возможную глубину рекурсии.
Наибольшее возможное значение зависит от платформы, но и оно ограничено. Текущее значение этой величины можно узнать, вызвав метод getrecursionlimit().
"""

def stairs_builder(n):
    if n == 0:  # Базовый случай.
        print('Испанская лестница построена!')
        return
    # Построить 1 ступеньку.
    print(f'Осталось построить ступеней: {n}.')
    stairs_builder(n - 1)  # Рекурсивный случай.


stairs_builder(138)