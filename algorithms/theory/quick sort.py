"""
Алгоритм быстрой сортировки (англ. quick sort) применяют во встроенных функциях сортировки во многих языках программирования; 
во встроенных реализациях этот алгоритм может быть модифицирован, но в основе — именно он. Это признание!
В быстрой сортировке применяется стратегия «разделяй и властвуй»: 
разделить массив на части меньшего размера;
рекурсивно вызвать алгоритм сортировки для этих частей;
объединить результаты, полученные для частей, в общий результат.

Устойчивость этого алгоритма зависит от partition(). Чтобы сортировка была устойчивой, нужно перебирать элементы массива с начала к концу 
и переносить элементы во вспомогательные массивы left, center, right ровно в том порядке, в котором элементы шли в исходном массиве. 
Именно так и сделано в коде примера.
Временная сложность быстрой сортировки зависит от того, насколько удачно выбран опорный элемент. 
В худшем случае, если в качестве опорного элемента выбрано минимальное или максимальное значение в массиве, а сам массив при этом уже отсортирован, 
быстрая сортировка проходит за квадратичное время. 
А вот в среднем случае алгоритм быстрой сортировки выполняется за O(n log n).
Чтобы гарантированно избежать худшего случая — в качестве опорного элемента лучше выбирать центральный элемент массива 
(расположенный примерно посередине, например — с индексом len(array) // 2).
"""

def quicksort(array):
    """Быстрая сортировка."""
    len_array = len(array)

    # Базовый случай рекурсии.
    if len_array <= 1:
        return array
    # Определяем индекс опорного элемента.
    middle_element_index = len_array // 2
    # Получаем опорный элемент:
    pivot = array[middle_element_index]
    # Передаём в функцию partition() массив и опорный элемент.
    left, center, right = partition(array, pivot)
    # Рекурсивно вызываем quicksort() для левого и правого списков, 
    # а затем соединяем все три списка в один.
    return quicksort(left) + center + quicksort(right)


def partition(array, pivot):
    """
    Разбивает массив на три разных массива относительно опорного элемента.
    """
    # Создаём три пустых списка.
    left, center, right = [], [], []
    # Раскладываем элементы по спискам.
    for item in array:
        if item < pivot:
            left.append(item)
        elif item > pivot:
            right.append(item)
        else:
            center.append(item)
    # Возвращаем кортеж с тремя списками.
    return left, center, right


arr = [44, 60, 10, 61, 60, 2, 62, 18, 2, 69]
result = quicksort(arr)
print(result)
