"""
Реализация слияния двух отсортированных массивов.

Функция merge() («слияние») принимает на вход два отсортированных массива. Это как две полуколоды карт: 
один из массивов «лежит слева», left, другой — «справа», right. Операции выполняем в цикле, перебирая оба полумассива.
На каждой итерации цикла будем брать наименьшие элементы из двух полумассивов, сравнивать их — 
и записывать меньшее из двух значений в список result.
На старте эти указатели «смотрят» на элементы left[0] и right[0]. Эти элементы и берём для сравнения. 
Если в результате сравнения в список result перенесли элемент из left — увеличиваем указатель left_idx на единицу. То же и с правым. 
Когда хоть один указатель доберётся до конца своего массива — цикл останавливаем.

Принцип работы сортировки слиянием
1. Массив разбивается на две части, пополам.
2. Если в каком-то из получившихся подмассивов больше одного элемента, то для него рекурсивно запускается разделение на части, как в п. 1.
3. Когда в подмассивах после разделения на части остаётся по одному элементу, два упорядоченных массива соединяются в один. 
Получившиеся массивы объединяются со своими половинами — и так до полной сборки массива.

Разборка колоды — это прямой ход рекурсии, а сборка с одновременной сортировкой — это обратный ход. 
Обратный ход рекурсии начинается после того, как получен массив, состоящий из одного элемента. Такая ситуация — это базовый случай рекурсии.
"""

def merge(left, right):
    # Создаём пустой список result.
    # Сразу создать результирующий список нужной длины не получится:
    # элементы будут добавляться в конец списка,
    # а не занимать места по индексам.
    result = []
    
    # Удалять элементы из массивов невыгодно: возрастёт временная сложность.
    # Вместо этого будем двигать по массивам указатели. 
    # Устанавливаем их на стартовую позицию:
    left_idx, right_idx = 0, 0
    
    # Сохраняем длины массивов, чтобы не считать их на каждом шаге цикла.
    len_left, len_right = len(left), len(right)
    
    # Пока ни один указатель не дошёл до конца своего массива...
    while left_idx < len_left and right_idx < len_right:
        # ...сравниваем элементы, на которые "смотрят" указатели.
        if left[left_idx] <= right[right_idx]:
            result.append(left[left_idx])
            # Если перенесли элемент из left,
            # увеличиваем значение указателя left_idx.
            left_idx += 1
        else:
            result.append(right[right_idx])
            # Если перенесли элемент из right,
            # увеличиваем значение указателя right_idx.
            right_idx += 1
    
    # Добавляем в result оставшиеся элементы, 
    # когда один массив закончился, а второй нет.
    return result + left[left_idx:] + right[right_idx:]


# ________________________________________________________________________________________
# Рекурсия
#________________________________________________________________________________________

def merge_sort(array):
    # Сохраняем длину массива в переменную, чтобы не считать её каждый раз.
    len_array = len(array)
    # Базовый случай рекурсии.
    if len_array <= 1:
        return array
    
    # Рекурсивный разбор массива в левой половине:
    # передаём в merge_sort() левую половину полученного на вход массива.
    left = merge_sort(array[0 : len_array // 2])
    
    # Рекурсивный разбор массива в правой половине:
    # передаём в merge_sort() правую половину полученного на вход массива.
    right = merge_sort(array[len_array // 2 : len_array])
    
    return merge(left, right)


# А функция сортировки и слияния у нас уже есть!
def merge(left, right):
    result = []
    left_idx, right_idx = 0, 0
    len_left, len_right = len(left), len(right)
    
    while left_idx < len_left and right_idx < len_right:
        # Сравниваем:
        if left[left_idx] <= right[right_idx]:
            # Добавляем в result:
            result.append(left[left_idx])
            # Сдвигаем указатель:
            left_idx += 1
        else:
            result.append(right[right_idx])
            right_idx += 1
    
    return result + left[left_idx:] + right[right_idx:]


test_array = [5, 4, 9, 10, 8, 3, 11, 1, 7, 6, 2]
print(merge_sort(test_array))

# Принцип работы:

# Вызов функции сортировки для заданного массива:
# 1. Выполняется merge_sort-1 с аргументом (5, 4, 9, 10, 8, 3, 11, 1, 7, 6, 2)
#    left = ...вызвали merge_sort-2 и ожидаем результата.

# 2.      Выполняется merge_sort-2 с аргументом (5, 4, 9, 10, 8)
#         left = ...вызвали merge_sort-3 и ожидаем результата.

# 3.          Выполняется merge_sort-3 с аргументом (5, 4)
#             left = ...вызвали merge_sort-4 и ожидаем результата.

# 4.              Выполняется merge_sort-4 с аргументом (5)
#                 len(array) <= 1 True!
#                   return array
#                 Функция merge_sort-4 возвращает в merge_sort-3 значение array = [5]
#                 и прекращает работу.

# 3.          merge_sort-3 дождалась результата, значение переменной left вычислено;
#             merge_sort-3 переходит к вычислению переменной right.
#             Когда right будет вычислена - значения left и right будут 
#             отсортированы и объединены в массив в функции merge().
#             Массив array = [4, 5] будет передан в merge_sort-2,
#             а функция merge_sort-3 завершит работу.

# 2.      merge_sort-2 дождалась результата, значение переменной left вычислено;
#         merge_sort-2 переходит к вычислению переменной right.
#         ...
#         Массив array = [4, 5, 8, 9, 10] будет передан в merge_sort-1,
#         а функция merge_sort-2 завершит работу.

# 1. merge_sort-1 дождалась результата, значение переменной left вычислено;
#    merge_sort-1 переходит к вычислению переменной right.
#    ...
#    Функция merge_sort-1 вернёт массив 
#    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
#    и завершит работу.

# Программа выполнена.