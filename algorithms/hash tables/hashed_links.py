"""
Задача «Шифровка ссылок»
Марсоход ежедневно получает из Центра управления ссылки, по которым он скачивает информацию, необходимую в повседневной работе. 
Ссылки могут быть совершенно разными по структуре. Злоумышленники и марсиане пытаются получить доступ к информации, предназначенной для марсохода. 
Для защиты данных было решено передавать ссылки в зашифрованном виде, чтобы никто не догадался. 
Напишите программу, которая будет шифровать ссылки. 
Любая переданная в программу ссылка должна быть преобразована в ссылку вида https://ma.rs/<hash>, где <hash> — изменяемая часть, которая может включать английские буквы любого регистра и цифры. 
Например, ссылка https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html может быть преобразована в ссылку вида https://ma.rs/X7NYIol.
Количество символов после префикса https://ma.rs/ может быть любым.
Реализуйте класс MarsURLEncoder, который будет шифровать и расшифровывать ссылки.
В классе должно быть два метода:
метод encode() должен получать на вход исходные ссылки и возвращать зашифрованные, вида https://ma.rs/<hash>;
метод decode() должен принимать зашифрованную ссылку и возвращать исходную.
Пары «зашифрованная ссылка» + «исходная ссылка» должны храниться в словаре.
В конструкторе класса __init__(...) создайте атрибут — хранилище ссылок. Это должен быть словарь, в котором 
ключ — это сгенерированная зашифрованная ссылка
значение — исходная ссылка
Например, если ссылка https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html преобразована в https://ma.rs/X7NYIol, то в словарь должен быть добавлен такой элемент:
{
    ...,
    'https://ma.rs/X7NYIol': 'https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html'
}
Ключом словаря-хранилища может быть не вся зашифрованная ссылка, а только её хеш-фрагмент:

{
    ...,
    'X7NYIol': 'https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html'
} 
Выбор варианта — за вами.
К изменяющейся части зашифрованной ссылки особых требований нет — там может быть любая последовательность букв и цифр — например, из шести символов. Важно, чтобы по зашифрованной ссылке можно было восстановить исходную.
Как выполнять работу:
Создать строку с набором символов, которые могут быть в хеше.
Создать словарь, в котором будут храниться пары хеш: исходная ссылка.
Шифрование ссылки:
В случайном порядке выбрать из строки нужное количество символов (в этом поможет функция choice() или модуль стандартной библиотеки random) и собрать полученные символы в одну строку.

После создания хеша потребуется дополнительная проверка на уникальность — не случилась ли коллизия. Если полученный хеш уже есть среди ключей словаря, то нужно сгенерировать хеш заново: вероятность повторной коллизии довольно мала.
Сохранить хеш и ссылку в словарь.
Расшифровка ссылки:
Извлечь хеш из полученной ссылки вида https://ma.rs/X7NYIol.
Найти в словаре ключ, соответствующий полученному хешу.
Вернуть значение найденного ключа.
Альтернативные способы решения
Для создания хеша можно применить хеширующие функции из модуля стандартной библиотеки hashlib. При этом варианте можно обойтись без строки с набором «разрешённых символов».
Есть и более скучный простой вариант: завести счётчик целых чисел — и каждой новой ссылке присваивать очередное значение счётчика. Переменная часть ссылки будет состоять только из цифр: https://ma.rs/1, https://ma.rs/2... Не особо похоже на хеш, но сработает.
"""

import hashlib

class MarsURLEncoder:

    def __init__(self):
        self.storage = {}

    def encode(self, long_url):
        """Кодирует длинную ссылку в короткую вида https://ma.rs/X7NYIol."""
        short_url = hashlib.sha256(long_url.encode()).hexdigest()[:6]
        while short_url not in self.storage:
            self.storage[short_url] = long_url
            return f'https://ma.rs/{short_url}'

    def decode(self, short_url):
        """Декодирует короткую ссылку вида https://ma.rs/X7NYIol в исходную."""
        short_hash = short_url.split('/')[-1]
        return self.storage.get(short_hash)

# result = MarsURLEncoder()
# key = result.encode('https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html')
# print(key)

# result = MarsURLEncoder()
# key = result.decode('https://ma.rs/X7NYIol')
# print(key)